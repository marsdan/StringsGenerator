//
//  ConsoleIO.swift
//  SwiftScript
//
//  Created by Jayakumar Vivek on 30/10/2020.
//

import Foundation
import CSV

struct StringsHelper {
    
    private let inputPath: String
    private let outputPath: String
    private let languageCodes: String
    
    init(inputPath: String,
         outputPath: String,
         languageCodes: String) {
        self.inputPath = inputPath
        self.outputPath = outputPath
        self.languageCodes = languageCodes
    }
    
    func generateLocalisation() {
        let languageArray = languageCodes.components(separatedBy: ",")
        for language in languageArray {
            generateLanguageString(langCode: language)
        }
        
    }
    
    private func generateLanguageString(langCode: String) {
        
        guard let stream = InputStream(fileAtPath: inputPath) else {
            ConsoleHelper.writeMessage("Input file not found")
            return
        }
        do {
            let csv = try CSVReader(stream: stream, hasHeaderRow: true)
            let headers = csv.headerRow
            guard let index = headers?.firstIndex(of: langCode) else {
                ConsoleHelper.writeMessage("Language(s) not found")
                return
            }
            let idIndex = headers?.firstIndex(of: "id") ?? 0
            let commentIndex = headers?.firstIndex(of: "comment") ?? 0
            
            ConsoleHelper.writeMessage("idIndex:\(idIndex)")
            let formatter = DateFormatter()
            formatter.dateFormat = "HH:mm E, d MMM y"
            var generatedString = "// Autogenerated at " + formatter.string(from: Date()) + ". Do not modify\n\n"
            for row in AnyIterator(csv) {
                let key = row[idIndex].replacingOccurrences(of: "\"", with: "")
                let value = row[index]
                    .replacingOccurrences(of: "\"", with: "")
                    .trimmingCharacters(in: .whitespaces) ///去掉首位空格
                if key.isEmpty == true || value.isEmpty == true {
                    continue
                }
                let sectionFromKey = row[commentIndex].components(separatedBy: ".")[0]
                if sectionFromKey.isEmpty == false {
                    generatedString += "\n/* \(sectionFromKey) */\n"
                }
                generatedString += "\"\(key)\" = \"\(value)\";\n"
            }
            ConsoleHelper.writeMessage("generatedString\(generatedString)")
            _ = writeToFile(writeText: generatedString, langCode: langCode)
        }
        catch {
            ConsoleHelper.writeMessage("Unexpected error: \(error).")
        }
        
        
    }
    
    private func writeToFile(writeText: String,
                             langCode: String) -> Bool {
        
        let fileManager = FileManager.default
        let directory = URL(fileURLWithPath: outputPath)
        let langugePath = directory.appendingPathComponent("\(langCode).lproj")
        let filePath = langugePath.appendingPathComponent("Localizable.strings")
        do {
            if !fileManager.fileExists(atPath: langugePath.path) {
                try fileManager.createDirectory(atPath: langugePath.path,
                                                withIntermediateDirectories: true,
                                                attributes: nil)
                ConsoleHelper.writeMessage("Directory is \(langugePath.absoluteString)")
            }
            try writeText.write(to: filePath, atomically: true, encoding: String.Encoding.utf8)
            ConsoleHelper.writeMessage("File generated at: \(filePath.absoluteString)")
        } catch {
            ConsoleHelper.writeMessage("Error: Failed to write: \n\(error)", to: .error)
            return false
        }
        return true
    }
}



